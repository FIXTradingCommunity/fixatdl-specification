<?xml version="1.0" encoding="UTF-8"?>
<!--
	- - - - - - - - - - - - - - - - - - - - - - - - - -
    FIXatdl Sample document instance for FIXatdl Schema Version 1.1
    (C) 2010 FIX Protocol Limited. All use of the FIXatdl Schema is subject to
    the disclaimer which is printed on one of the initial pages of the written specification
    for the FIXatdl Schema and is included in the zip file which you downloaded to
    obtain the Schema.
    Comments and errors should be posted on the FIX protocol web-site
    http://www.fixprotocol.org
	- - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:val="http://www.fixprotocol.org/FIXatdl-1-2/Validation"
           xmlns:core="http://www.fixprotocol.org/FIXatdl-1-2/Core"
           targetNamespace="http://www.fixprotocol.org/FIXatdl-1-2/Validation"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           version="1.1">
	<xs:annotation>
		<xs:documentation>
      This value is the internal build number of the ATDL Schema
    </xs:documentation>
		<xs:appinfo>
			<BuildInfo buildNumber="1.0"/>
		</xs:appinfo>
	</xs:annotation>
	<xs:import namespace="http://www.fixprotocol.org/FIXatdl-1-2/Core" schemaLocation="fixatdl-core-1-2.xsd"/>
	<!-- 
  Validation Sub-Schema
  In order to validate the parameter values entered by the user the following sub-schema has been provided. 
  It enables the creation of complex and conditional validation rules that can be applied to the algorithmic 
  orders generated by an OMS or EMS.
  -->
	<xs:element name="StrategyEdit" type="val:StrategyEdit_t"/>
	<xs:complexType name="StrategyEdit_t">
		<xs:annotation>
			<xs:documentation>Specifies a strategy-wide rule consisting of a boolean expression and an error message to be didsplayed when the boolean expression evaluates to False().</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="core:Description" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Optional description of the Strategy Edit.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice>
				<xs:element name="Edit" type="val:Edit_t">
					<xs:annotation>
						<xs:documentation>A boolean expression consisting of an operator and one or two operands. OPerands may refer to GUI control values, parameter values or standard FIX tag values, depending on the context of how the expression is used.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="EditRef" type="val:EditRef_t"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="errorMessage" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>This error message to display when the edit condition evaluates to false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="Edit" type="val:Edit_t"/>
	<xs:complexType name="Edit_t">
		<xs:annotation>
			<xs:documentation>Construct used to build a boolean expression.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="core:Description" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Description of the Edit.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Edit" type="val:Edit_t" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="EditRef" type="val:EditRef_t" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="field" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Field name for comparison. When the edit is used within a stateRule, this field must refer to the ID of a Control. When the edit is used within a strategyEdit, this field must refer to either the name of a parameter or a standard FIX field name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="field2" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Field name for comparison. Similar definition to field except that it is mutually exclusive with value.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Value for comparison when using an operator. "field2" and "value" are mutually exclusive.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="operator" type="val:operator_t" use="optional">
			<xs:annotation>
				<xs:documentation>One of the following enumerated types: EX (Exists or supplied by user), NX (Does not exist or was not supplied), EQ (Equal), LT (Less than), GT (Greater than), NE (Not equal), LE (Less than equal), GE (Greater than equal). Mutually exclusive with logicOperator.       </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="logicOperator" type="val:logicOperator_t" use="optional">
			<xs:annotation>
				<xs:documentation>One of the following enumerated types: AND, OR, XOR, NOT. Mutually exclusive with operator.  Short-circuit evaluation is assumed in all edit statements. Advanced logic operators are AND_ALSO and OR_ELSE which are equivilent to AND and OR but explicitly indicate short-circuit evaluation.     </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Optional identifier. Allows for re-use of this edit within stateRule or editRef elements.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="EditRef" type="val:EditRef_t"/>
	<xs:complexType name="EditRef_t">
		<xs:attribute name="id" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Refers to an ID of a previously defined edit element. The edit element may be defined at the strategy level or at the strategies level.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="operator_t">
		<xs:restriction base="xs:string">
			<xs:enumeration value="EX"/>
			<xs:enumeration value="NX"/>
			<xs:enumeration value="EQ"/>
			<xs:enumeration value="NE"/>
			<xs:enumeration value="LE"/>
			<xs:enumeration value="LT"/>
			<xs:enumeration value="GE"/>
			<xs:enumeration value="GT"/>
			<!-- exists -->
			<!-- not exists -->
			<!-- equal -->
			<!-- not equal -->
			<!-- less than or equal -->
			<!-- less than -->
			<!-- greater than or equal -->
			<!-- greater than -->
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="logicOperator_t">
		<xs:restriction base="xs:string">
			<xs:enumeration value="AND"/>
			<xs:enumeration value="OR"/>
			<xs:enumeration value="XOR"/>
			<xs:enumeration value="NOT"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
